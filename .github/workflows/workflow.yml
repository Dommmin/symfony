name: 🚀 Build, Push and Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  NODE_IMAGE_NAME: dommmin/symfony-node-builder
  PHP_IMAGE_NAME: dommmin/symfony-php
  NGINX_IMAGE_NAME: dommmin/symfony-nginx
  DOCKER_BUILDKIT: 1

jobs:
  build:
    name: 🏗️ Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env files
        run: |
          mkdir -p deployment/node deployment/php
          printf '%s\n' '${{ vars.ENV_FILE }}' > deployment/node/.env
          printf '%s\n' '${{ vars.ENV_FILE }}' > deployment/php/.env
          cat deployment/node/.env

      - name: Build and push Node builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/node/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.NODE_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push PHP image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/php/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.PHP_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/nginx/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.NGINX_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-contexts: |
            node=docker-image://${{ env.REGISTRY }}/${{ env.NODE_IMAGE_NAME }}:latest
            php=docker-image://${{ env.REGISTRY }}/${{ env.PHP_IMAGE_NAME }}:latest

  deploy:
   name: 🚀 Deploy to Production
   needs: build
   runs-on: ubuntu-latest
   timeout-minutes: 15

   steps:
     - name: Checkout repository
       uses: actions/checkout@v4 # Critical for accessing files!

     - name: Setup SSH Authentication
       uses: webfactory/ssh-agent@v0.9.1
       with:
         ssh-private-key: ${{ secrets.SSH_KEY }}

     - name: Configure known_hosts
       run: |
         mkdir -p ~/.ssh
         ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

     - name: Prepare environment file
       run: |
         printf '%s\n' '${{ vars.ENV_FILE }}' > .env
         {
           echo "REGISTRY=${{ env.REGISTRY }}"
           echo "PHP_IMAGE_NAME=${{ env.PHP_IMAGE_NAME }}"
           echo "NGINX_IMAGE_NAME=${{ env.NGINX_IMAGE_NAME }}"
           echo "TAG=latest"
         } >> .env

     - name: Transfer deployment files
       run: |
         scp -P ${{ secrets.SSH_PORT }} \
           docker-compose.production.yml \
           ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/symfony/docker-compose.yml

         scp -P ${{ secrets.SSH_PORT }} \
           .env deploy.sh \
           ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/symfony/

     - name: Trigger deployment script
       run: |
         ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
           "cd ~/symfony && chmod +x deploy.sh && ./deploy.sh"
